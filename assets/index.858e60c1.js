(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function n(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerpolicy&&(s.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?s.credentials="include":o.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(o){if(o.ep)return;o.ep=!0;const s=n(o);fetch(o.href,s)}})();class S extends HTMLElement{connectedCallback(){const e=this.getAttribute("name"),n=this.getAttribute("email"),r=this.getAttribute("contents");this.innerHTML=`
    <div class='comment'>
      <p>${e} | ${n}</p>
      <hr>
      ${r}
    <style>
      .comment {
        width: 40%;
        height: auto;
        padding: 10px;
        border: 2px solid gray;
        background-color: #b8b6b6a4;
      }

      p {
        color: blue;
      }
    </style>
    </div>
    `}}customElements.define("comment-",S);const B={addComment(t,e){t.commit("addComment",e)},clearComment(t,e){t.commit("clearComment",e)},editNote(t,e){t.commit("editNote",e)}},P=(t,e)=>e.some(n=>t instanceof n);let E,D;function O(){return E||(E=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])}function N(){return D||(D=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])}const v=new WeakMap,y=new WeakMap,C=new WeakMap,d=new WeakMap,w=new WeakMap;function T(t){const e=new Promise((n,r)=>{const o=()=>{t.removeEventListener("success",s),t.removeEventListener("error",i)},s=()=>{n(u(t.result)),o()},i=()=>{r(t.error),o()};t.addEventListener("success",s),t.addEventListener("error",i)});return e.then(n=>{n instanceof IDBCursor&&v.set(n,t)}).catch(()=>{}),w.set(e,t),e}function $(t){if(y.has(t))return;const e=new Promise((n,r)=>{const o=()=>{t.removeEventListener("complete",s),t.removeEventListener("error",i),t.removeEventListener("abort",i)},s=()=>{n(),o()},i=()=>{r(t.error||new DOMException("AbortError","AbortError")),o()};t.addEventListener("complete",s),t.addEventListener("error",i),t.addEventListener("abort",i)});y.set(t,e)}let b={get(t,e,n){if(t instanceof IDBTransaction){if(e==="done")return y.get(t);if(e==="objectStoreNames")return t.objectStoreNames||C.get(t);if(e==="store")return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return u(t[e])},set(t,e,n){return t[e]=n,!0},has(t,e){return t instanceof IDBTransaction&&(e==="done"||e==="store")?!0:e in t}};function A(t){b=t(b)}function x(t){return t===IDBDatabase.prototype.transaction&&!("objectStoreNames"in IDBTransaction.prototype)?function(e,...n){const r=t.call(f(this),e,...n);return C.set(r,e.sort?e.sort():[e]),u(r)}:N().includes(t)?function(...e){return t.apply(f(this),e),u(v.get(this))}:function(...e){return u(t.apply(f(this),e))}}function j(t){return typeof t=="function"?x(t):(t instanceof IDBTransaction&&$(t),P(t,O())?new Proxy(t,b):t)}function u(t){if(t instanceof IDBRequest)return T(t);if(d.has(t))return d.get(t);const e=j(t);return e!==t&&(d.set(t,e),w.set(e,t)),e}const f=t=>w.get(t);function g(t,e,{blocked:n,upgrade:r,blocking:o,terminated:s}={}){const i=indexedDB.open(t,e),m=u(i);return r&&i.addEventListener("upgradeneeded",a=>{r(u(i.result),a.oldVersion,a.newVersion,u(i.transaction))}),n&&i.addEventListener("blocked",()=>n()),m.then(a=>{s&&a.addEventListener("close",()=>s()),o&&a.addEventListener("versionchange",()=>o())}).catch(()=>{}),m}const q=["get","getKey","getAll","getAllKeys","count"],H=["put","add","delete","clear"],h=new Map;function L(t,e){if(!(t instanceof IDBDatabase&&!(e in t)&&typeof e=="string"))return;if(h.get(e))return h.get(e);const n=e.replace(/FromIndex$/,""),r=e!==n,o=H.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!(o||q.includes(n)))return;const s=async function(i,...m){const a=this.transaction(i,o?"readwrite":"readonly");let l=a.store;return r&&(l=l.index(m.shift())),(await Promise.all([l[n](...m),o&&a.done]))[0]};return h.set(e,s),s}A(t=>({...t,get:(e,n,r)=>L(e,n)||t.get(e,n,r),has:(e,n)=>!!L(e,n)||t.has(e,n)}));const W={addComment(t,e){return t.comments.push(e),t},clearComment(t,e){return t.comments.splice(e.index,1),t},editNote(t,e){return t.notes=e,t}},k={comments:[],notes:""};class F{constructor(){this.events={}}subscribe(e,n){return this.events.hasOwnProperty(e)||(this.events[e]=[]),this.events[e].push(n)}publish(e,n={}){return this.events.hasOwnProperty(e)?this.events[e].map(r=>r(n)):[]}}class I{constructor(e){let n=this;n.actions={},n.mutations={},n.state={},n.status="resting",n.events=new F,e.hasOwnProperty("actions")&&(n.actions=e.actions),e.hasOwnProperty("mutations")&&(n.mutations=e.mutations),n.state=new Proxy(e.state||{},{set:function(r,o,s){return r[o]=s,console.log(`stateChange: ${o}: ${s}`),n.events.publish("stateChange",n.state),n.status!=="mutation"&&console.warn(`You should use a mutation to set ${o}!`),n.status="resting",!0}})}dispatch(e,n){return typeof this.actions[e]!="function"?(console.error(`Action "${e}" doesn't exist!`),!1):(console.groupCollapsed(`ACTION: ${e}`),this.status="action",this.actions[e](this,n),console.groupEnd(),!0)}commit(e,n){if(typeof this.mutations[e]!="function")return console.error(`Mutation "${e}" doesn't exist`),!1;this.status="mutation";let r=this.mutations[e](this.state,n);return this.state=Object.assign(this.state,r),!0}}const c=new I({actions:B,mutations:W,state:k});class M{constructor(e={}){this.render=this.render||function(){},e.store instanceof I&&e.store.events.subscribe("stateChange",()=>this.render()),e.hasOwnProperty("element")&&(this.element=e.element)}}class V extends M{constructor(){super({store:c,element:document.querySelector(".comments")})}render(){if(c.state.comments.length===0){this.element.innerHTML="<p>No comments yet!</p>";return}this.element.innerHTML=`
    <div class='comments-list'>
      ${c.state.comments.map(e=>`
        <comment- name='${e.name}' email='${e.email}' contents='${e.contents}'></comment->
        <button>Delete Comment</button>
        `).join("")}
    </div>`,this.element.querySelectorAll("button").forEach((e,n)=>{e.addEventListener("click",()=>{c.dispatch("clearComment",{index:n})})})}}class R extends M{constructor(){super({store:c,element:document.querySelector("#note")})}render(){if(c.state.notes.length===0){this.element.innerHTML=`
      No Notes Yet!
      `;return}this.element.innerHTML=`
    ${c.state.notes}
    `}}window.addEventListener("DOMContentLoaded",async()=>{g("comment-store",1,{upgrade(n){n.createObjectStore("comments",{autoIncrement:!0}),console.log("hi")}});const t=await g("comment-store",1),e=await t.getAll("comments")||{};for(let n=0;n<e.length;n++)c.dispatch("addComment",e[n]);t.close()});const Y=document.querySelector(".comment-form"),z=document.querySelector("#name"),G=document.querySelector("#email"),p=document.querySelector("#new-comment-field");Y.addEventListener("submit",async t=>{t.preventDefault();let e=z.value.trim(),n=G.value.trim(),r=p.value.trim();if(e.length&&n.length&&r.length){let o={name:e,email:n,contents:r};c.dispatch("addComment",o);const s=await g("comment-store",1);await s.put("comments",o),s.close(),p.value="",p.focus()}});const J=new V,Q=new R;J.render();Q.render();const U=document.querySelector(".notes"),X=document.querySelector("#note");U.addEventListener("submit",async t=>{t.preventDefault();let e=X.value.trim();c.dispatch("editNote",e)});
